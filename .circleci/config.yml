version: 2.1

orbs:
  orb-tools: circleci/orb-tools@10.0
  #kubernetes: circleci/kubernetes@0.11

commands:
    initialize:
        description: Initilize the gcloud CLI.
        parameters:
            gcloud-service-key:
                default: GCLOUD_SERVICE_KEY
                description: |
                    Name of environment variable storing the full service key JSON file
                    for the Google project.
                type: env_var_name
            google-compute-region:
                default: GOOGLE_COMPUTE_REGION
                description: The Google compute region to connect with via the gcloud CLI
                type: env_var_name
            google-compute-zone:
                default: GOOGLE_COMPUTE_ZONE
                description: The Google compute zone to connect with via the gcloud CLI.
                type: env_var_name
            google-project-id:
                default: GOOGLE_PROJECT_ID
                description: The Google project ID to connect with via the gcloud CLI.
                type: env_var_name
        steps:
            - run:
                command: |
                    # Store service account
                    echo $<<parameters.gcloud-service-key>> > ${HOME}/gcloud-service-key.json

                    # Initialize gcloud CLI
                    gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
                    gcloud --quiet config set project $<<parameters.google-project-id>>

                    if [[ -n $<<parameters.google-compute-zone>> ]]; then
                      gcloud --quiet config set compute/zone $<<parameters.google-compute-zone>>
                    elif [[ -n $<<parameters.google-compute-region>> ]]; then
                      gcloud --quiet config set compute/region $<<parameters.google-compute-region>>
                    else
                      echo "ERROR: Set <<parameters.google-compute-zone>> or <<parameters.google-compute-region>> env variable" >&2
                      exit 1
                    fi
                name: Initialize gcloud CLI to connect to Google Cloud
    install:
        description: |
            Install the gcloud CLI. When installing within the Docker executor, the
            install will only occur if the CLI isn't already installed. If installing in
            a Linux machine image, it will remove the pre-installed version and instead
            install the version specified by this orb.
        parameters:
            version:
                default: 323.0.0
                description: 'Version of the CLI to install. Must contain the full version number as it appears in the URL on this page: https://cloud.google.com/sdk/docs/downloads-versioned-archives'
                type: string
        steps:
            - run:
                command: |
                    install () {
                      # Set sudo to work whether logged in as root user or non-root user
                      if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
                      cd ~/
                      curl -Ss --retry 5 https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-<<parameters.version>>-linux-x86_64.tar.gz | tar xz
                      echo 'source ~/google-cloud-sdk/path.bash.inc' >> $BASH_ENV
                    }

                    if grep 'docker\|lxc' /proc/1/cgroup > /dev/null 2>&1; then
                      if [[ $(command -v gcloud) == "" ]]; then
                        install
                      else
                        echo "gcloud CLI is already installed."
                      fi
                    else
                      echo "----------------------------------------------------------------------------------------------------"
                      echo "this is a machine executor job, replacing default installation of gcloud CLI"
                      echo "----------------------------------------------------------------------------------------------------"
                      sudo rm -rf /opt/google-cloud-sdk
                      install
                    fi
                name: Install latest gcloud CLI version, if not available
            - run:
                command: gcloud version
                name: gcloud CLI version
    copy-to-gcp-bucket:
        description: Copy to a gcloud bucket.
        parameters:
            google-bucket-name:
                description: The Google bucket name to upload to.
                type: string
        steps:
            - run:
                command: |
                    gsutil -m cp -r out/* gs://<< parameters.google-bucket-name >>/
                name: Copy repo folder to gcloud bucket
    kubectl-replace:
        description: Replace k8s manifest
        parameters:
            k8s-manifest:
                description: location of file or folder being reapplied
                type: string
            google-compute-zone:
                default: GOOGLE_COMPUTE_ZONE
                description: The Google compute zone to connect with via the gcloud CLI.
                type: env_var_name
            google-cluster:
                default: GOOGLE_CLUSTER
                description: The Google cluster to connect with via the gcloud CLI.
                type: env_var_name
            kubernetes-namespace:
                default: KUBERNETES_NAMESPACE
                description: The kubernetes namespace to connect with via the kubectl CLI.
                type: env_var_name
        steps:
           - run:
               command: |
                    gcloud components install kubectl
                    gcloud container clusters get-credentials $<< parameters.google-cluster >> --zone=$<< parameters.google-compute-zone >>
                    kubectl config set-context --current --namespace $<< parameters.kubernetes-namespace >>
                    kubectl replace --force -f << parameters.k8s-manifest >>


executors:
    docker-publisher:
        environment:
            IMAGE_NAME: adamsuk/sradams-co-uk-content
        docker:
            - image: circleci/buildpack-deps:stretch
    default:
        description: The default executor is the CircleCI Python Convenience Image.
        docker:
            - image: cimg/python:<<parameters.version>>
        parameters:
            version:
                default: "3.7"
                description: |
                    Python version to use. Take into account the versions of Python available
                    from CircleCI (https://hub.docker.com/r/cimg/python/tags) as well as what
                    is supported by gcloud CLI itself (https://cloud.google.com/sdk/docs/install).
                type: string
    google:
        description: The official Google Docker image with gcloud SDK and CLI pre-installed.
        docker:
            - image: google/cloud-sdk:<<parameters.sdk-version>>
        parameters:
            sdk-version:
                default: latest
                description: |
                    What version of the Google Cloud SDK Docker image? For full options, see https://hub.docker.com/r/google/cloud-sdk/tags
                type: string
    machine:
        description: |
            CircleCI's machine executor:
            https://circleci.com/docs/2.0/executor-types/#using-machine
        machine:
            image: <<parameters.image>>
        parameters:
            image:
                default: ubuntu-2004:202010-01
                description: |
                    Which machine executor image to use. For details, see
                    https://circleci.com/docs/2.0/configuration-reference/#machine
                type: string
                

jobs:
    install_and_initialize_cli:
        description: Install gcloud CLI and initialize to connect to Google Cloud.
        executor: <<parameters.executor>>
        parameters:
            executor:
                default: default
                description: |
                    Executor to use for this job. Defaults to this orb's default executor.
                type: executor
            gcloud-service-key:
                default: GCLOUD_SERVICE_KEY
                description: The gcloud service key
                type: env_var_name
            google-compute-region:
                default: GOOGLE_COMPUTE_REGION
                description: The Google compute region to connect with via the gcloud CLI
                type: env_var_name
            google-compute-zone:
                default: GOOGLE_COMPUTE_ZONE
                description: The Google compute zone to connect with via the gcloud CLI
                type: env_var_name
            google-project-id:
                default: GOOGLE_PROJECT_ID
                description: The Google project ID to connect with via the gcloud CLI
                type: env_var_name
            google-bucket-name:
                description: The Google bucket name to upload to.
                type: string
            k8s-manifest:
                description: Location of file or folder being applied
                type: string
        steps:
            - install
            - initialize:
                gcloud-service-key: <<parameters.gcloud-service-key>>
                google-compute-region: <<parameters.google-compute-region>>
                google-compute-zone: <<parameters.google-compute-zone>>
                google-project-id: <<parameters.google-project-id>>
            - checkout
            #- copy-to-gcp-bucket:
            #    google-bucket-name: << parameters.google-bucket-name >>
            - kubectl-replace:
                k8s-manifest: << parameters.k8s-manifest >>

    build:
        executor: docker-publisher
        steps:
            - checkout
            - setup_remote_docker
            - run:
                name: Build Docker image
                command: |
                    docker build -t $IMAGE_NAME:latest .
            - run:
                name: Archive Docker image
                command: docker save -o image.tar $IMAGE_NAME
            - persist_to_workspace:
                root: .
                paths:
                    - ./image.tar
    publish-latest:
        executor: docker-publisher
        steps:
            - attach_workspace:
                at: /tmp/workspace
            - setup_remote_docker
            - run:
                name: Load archived Docker image
                command: docker load -i /tmp/workspace/image.tar
            - run:
                name: Publish Docker Image to Docker Hub
                command: |
                    echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
                    docker push $IMAGE_NAME:latest


workflows:
  version: 2
  build-main:
    jobs:
      - build:
          filters:
            branches:
              only: main
      - publish-latest:
          context: gcp-bucket-build
          requires:
            - build
          filters:
            branches:
              only: main
      - install_and_initialize_cli: 
          context: gcp-bucket-build
          google-bucket-name: sradams.co.uk
          k8s-manifest: k8s/deployment.yml
          requires:
            - publish-latest
          filters:
            branches:
              only: main
